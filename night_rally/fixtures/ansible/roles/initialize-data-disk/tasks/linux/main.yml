---

- set_fact:
    distribution_item: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - '{{ ansible_distribution | lower }}.yml'
        - '{{ ansible_os_family | lower }}.yml'

- block:
    - include_tasks: "{{ distribution_item }}"
  become: true

# Ensure no open files are present prohibiting us from un-mounting the disk volume later on
- name: kill processes accessing the encrypted disk volume
  shell: fuser -k {{ encrypted_mount_point }}
  failed_when: false

- name: umount encrypted volume if applicable
  mount:
    src: '/dev/mapper/{{ encrypted_volume_name }}'
    name: '{{ encrypted_mount_point }}'
    fstype: '{{ default_linux_os_filesystem }}'
    opts: 'defaults'
    dump: 0
    passno: 2
    state: unmounted

- name: remove encrypted volume entry from fstab if applicable
  mount:
    src: '/dev/mapper/{{ encrypted_volume_name }}'
    name: '{{ encrypted_mount_point }}'
    fstype: '{{ default_linux_os_filesystem }}'
    opts: 'defaults'
    dump: 0
    passno: 2
    state: absent
  register: remove_mount_result
  retries: 5
  delay: 10
  until: remove_mount_result is successful

- name: delete cryptsetup passphrase file if present
  file:
    name: '{{ encrypted_volume_passphrase_file }}'
    state: absent

- name: release data disk from cryptsetup control if applicable
  command: cryptsetup close {{ encrypted_volume_name }}
  ignore_errors: true

- name: create new file system on the data disk
  command: mkfs.'{{ default_linux_os_filesystem }}' -F '{{ data_device }}'
  register: mkfs_data_disk_success

- fail: msg="Unable to format {{ data_device }} with mkfs.{{ default_linux_os_filesystem }}"
  when: mkfs_data_disk_success is failed

- name: ensure presence of mount dir for data volume
  file:
    path: '{{ data_disk_mount_point }}'
    state: directory
    owner: jenkins
    group: jenkins
    mode: '0755'

- name: configure fstab and automatically mount data volume
  mount:
    src: '{{ data_device }}'
    name: '{{ data_disk_mount_point }}'
    fstype: '{{ default_linux_os_filesystem }}'
    opts: 'defaults'
    dump: 0
    passno: 2
    state: mounted

- name: ensure data disk mount dir has the right ownership
  file:
    path: '{{ data_disk_mount_point }}'
    state: directory
    owner: jenkins
    group: jenkins
    mode: '0755'
