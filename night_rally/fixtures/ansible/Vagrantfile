# vi: set ft=ruby :
# -*- ruby -*-

require "ipaddr"


def successive_ips(base_ip, num_of_successive_ips)
  ip = base_ip.clone
  num_of_successive_ips.times.map { |n| ip = ip.succ; ip }
end

base_ip = '192.168.180.10'
boxname = "elastic/ubuntu-16.04-x86_64"

default_cpus = 2
default_target_node_count = 3
target_node_ip_addresses = successive_ips(base_ip, default_target_node_count)
# Memory settings in MB
default_load_driver_memory = 2048
default_target_memory = ENV.fetch("VAGRANT_TARGET_MEMORY", "5120")

install_build_requirements = ENV["VAGRANT_ENABLE_BUILD"].to_s.downcase=="true"
domain_name = "benchmarks.ci.vagrant"

nodes = [{ hostname: "coordinator", domain: domain_name, autostart: true, box: boxname, memory: default_load_driver_memory }]

# target-nodes
for i in 1..default_target_node_count
  nodes += [{ hostname: "target%02d" % [i], domain: domain_name, autostart: true, box: boxname, memory: default_target_memory.to_i }]
end

rally_repo = ENV.fetch("RALLY_REPO", "https://github.com/elastic/rally.git")
rally_branch = ENV.fetch("RALLY_BRANCH", "master")
rally_sha = ENV.fetch("RALLY_SHA", "")

def rally_sudoers
  # Use single quotes to avoid interpolating EOF2 intended for bash
  # tilde before 'EOF' allows indenting heredoc without passing the extra leading spaces to actual bash command
  <<~'EOF'
    cat >/etc/sudoers.d/rally_user <<EOF2
    Defaults:rally !requiretty
    rally ALL = (ALL) NOPASSWD: ALL
    EOF2
  EOF
end

def install_jenkins_user
  <<~EOF
    set +x
    groupadd -g 1010 jenkins
    useradd -u 1010 -g 1010 -s /bin/bash -m -k /etc/skel -d /var/lib/jenkins jenkins
    mkdir /var/lib/jenkins/.ssh

    cp /night_rally/night_rally/fixtures/ansible/.vagrantssh/id_rsa /var/lib/jenkins/.ssh/rally
    cp /night_rally/night_rally/fixtures/ansible/.vagrantssh/id_rsa.pub /var/lib/jenkins/.ssh/authorized_keys
    chown -R jenkins:jenkins /var/lib/jenkins/.ssh
    chmod -R 0600 /var/lib/jenkins/.ssh/rally
  EOF
end

def install_rally_user
  <<~EOF
    groupadd -g 1011 rally
    useradd -u 1011 -g 1011 -s /bin/bash -m -k /etc/skel -d /home/rally rally
    mkdir /home/rally/.ssh

    cp /night_rally/night_rally/fixtures/ansible/.vagrantssh/id_rsa /home/rally/.ssh/rally
    cp /night_rally/night_rally/fixtures/ansible/.vagrantssh/id_rsa.pub /home/rally/.ssh/authorized_keys
    chown -R rally:rally /home/rally/.ssh
  chmod -R 0600 /home/rally/.ssh/rally
  EOF
end

def install_vault
  <<~EOF
    CUR_HOME=$HOME
    curl -fsS -o ${CUR_HOME}/vault.zip https://releases.hashicorp.com/vault/1.1.1/vault_1.1.1_linux_amd64.zip
    sudo unzip ${CUR_HOME}/vault.zip -d /usr/local/bin
    sudo chmod +x /usr/local/bin/vault
    rm ${CUR_HOME}/vault.zip
  EOF
end

def install_rally_source(rally_repo, rally_branch, rally_sha)
  <<~EOF
    apt-get install -y python-virtualenv
    apt-get install -y python3-pip
    sudo -iu jenkins bash -c '
    pip3 install --user setuptools;
    cd /var/lib/jenkins;
    mkdir src bin;
    cd src;
    git clone #{rally_repo} --branch #{rally_branch};
    cd rally;
    if [[ ! -z \"#{rally_sha}\" ]]; then git checkout #{rally_sha}; fi;
    ./rally configure;
    cd /var/lib/jenkins;
    ln -s $PWD/src/rally/rally $PWD/bin/rally;
    ln -s $PWD/src/rally/rallyd $PWD/bin/rallyd;
    ln -s $PWD/night_rally/night_rally.sh $PWD/bin/night_rally;
    '
  EOF
end

def tweak_es_sysctl
  <<~EOF
    # Tweak sysctl so ES will start.
    grep -q '^vm.max_map_count=' /etc/sysctl.conf || ( \
      echo 'vm.max_map_count=262144' >> /etc/sysctl.conf && \
      sysctl --load \
    )
  EOF
end

def install_night_rally_test_script(base_ip, target_node_ip_addresses)
  <<~EOF
    cat >/var/lib/jenkins/env_test_script <<'EOF2'
    #export FIXTURES=drop-caches,trim,initialize-data-disk
    # Speed things up by starting with zero string fixtures, but allow overriding via env var
    export FIXTURES=${FIXTURES:-}
    export COORDINATING_NODES=#{base_ip}
    export TARGET_HOSTS="#{target_node_ip_addresses.join(',')}"
    export TEST_MODE=YES
    EOF2

    cat >/var/lib/jenkins/test_nightly.sh <<"EOF2"
    #!/usr/bin/env bash
    set -e
    source /var/lib/jenkins/env_test_script
    # release-license is oss just because it's the default option in the JJB dropdown; will be ignored in nightly mode
    night_rally --target-host="${TARGET_HOSTS}" --race-configs="resources/race-configs-group-1.json" --effective-start-date="" --mode="nightly" --version="master" --release-license="oss" --release-x-pack-components=""
    night_rally --target-host="${TARGET_HOSTS}" --race-configs="resources/race-configs-group-2.json" --effective-start-date="" --mode="nightly" --version="master" --release-license="oss" --release-x-pack-components=""
    EOF2

    cat >/var/lib/jenkins/test_release.sh <<"EOF2"
    #!/usr/bin/env bash
    set -e
    source /var/lib/jenkins/env_test_script
    night_rally --target-host="${TARGET_HOSTS}" --race-configs="resources/race-configs-group-1.json" --effective-start-date="" --mode="release" --version="6.7.0" --release-license="oss" --release-x-pack-components=""
    night_rally --target-host="${TARGET_HOSTS}" --race-configs="resources/race-configs-group-2.json" --effective-start-date="" --mode="release" --version="6.7.0" --release-license="oss" --release-x-pack-components=""
    EOF2

    chown jenkins:jenkins /var/lib/jenkins/test_*.sh
    chmod +x /var/lib/jenkins/test_*.sh
  EOF
end

def install_java(major_ver)
  <<~EOF
    jdk_url=$(curl -fsSL https://jvm-catalog.elastic.co/jdk/latest_openjdk_#{major_ver}_linux | jq -r .url)
    cd /var/lib/jenkins
    mkdir -p .java/openjdk#{major_ver}
    cd .java/openjdk#{major_ver}
    curl --progress-bar -fSL -o java#{major_ver}.tgz $jdk_url
    tar zxf java#{major_ver}.tgz --strip-components=1
    rm -f java#{major_ver}.tgz
    cd ../../
    chown -R jenkins:jenkins .java
  EOF
end

def symlink_java_8
  <<~EOF
    ln -s /usr/lib/jvm/java-8-openjdk-amd64 /var/lib/jenkins/.java/java8
    # dangling symlinks cause issues to certain gradle versions
    rm -f /usr/lib/jvm/java-8-openjdk-amd64/src.zip
  EOF
end

def pass_additional_jenkins_env_vars
  <<~EOF
    set +x
    cat >>/var/lib/jenkins/.profile <<EOF2
    export VAULT_ADDR=https://secrets.elastic.co:8200
    export RALLY_METRICS_STORE_CREDENTIAL_PATH=${RALLY_METRICS_STORE_CREDENTIAL_PATH:-/secret/rally/cloud/vagrant-test-rally-metrics}
    export IN_VAGRANT=YES
    EOF2
  EOF
end

Vagrant.configure(2) do |config|
  use_cachier = false
  if Vagrant.has_plugin?('vagrant-cachier') and not ENV['VAGRANT_NO_CACHIER']
    use_cachier = true
    config.cache.scope = :machine
  end

  ENV['VAGRANT_FORCE_REFRESH_CACHE'] = 'true'
  ip_address = IPAddr.new base_ip

  nodes.each do |node|

    fqdn = node[:hostname] + '.' + node[:domain]

    config.vm.define node[:hostname], autostart: (node[:autostart] || false) do |node_config|
      node_config.vm.box = node[:box] || boxname
      node_config.vm.hostname = fqdn
      node_config.vm.network :private_network, ip: ip_address.to_s

      node_config.vm.provider :virtualbox do |vbox, override_config|
        vbox.name = fqdn
        vbox.memory = node[:memory] || default_memory
        vbox.cpus = node[:cpus] || default_cpus
        override_config.vm.synced_folder '../../..', '/night_rally'

        # Workaround for https://github.com/fgrehm/vagrant-cachier/issues/175#issuecomment-233507989
        if use_cachier and ['ubuntu-16.04'].any? { |os_substring| node[:box].include?(os_substring) }
          override_config.cache.synced_folder_opts = {
            owner: "_apt",
            group: "_apt",
            mount_options: ["dmode=777", "fmode=666"],
          }
        end

        file_to_disk = File.realpath("vagrantdisk").to_s + "/#{node[:hostname]}_disk.vdi"
        vbox.customize ['createhd', '--filename', file_to_disk, '--size', 4*1024, '--format', 'VDI'] # Size is in MiB
        vbox.customize ['storageattach', :id, '--storagectl', 'IDE Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', file_to_disk]

        if node[:hostname] == "coordinator"
          override_config.vm.synced_folder "#{Dir.home}/", "/home/vagrant/", type: "rsync", rsync__args: ["-r", "--include=.vault-token", "--exclude=*"]
        end
      end

      node_config.ssh.forward_agent = true
      node_config.vm.provision "shell", inline: tweak_es_sysctl
      node_config.vm.provision "shell", inline: install_jenkins_user
      node_config.vm.provision "shell", inline: pass_additional_jenkins_env_vars, env: {"RALLY_METRICS_STORE_CREDENTIAL_PATH" => ENV["VAULT_NIGHT_RALLY_METRICS_STORE_CREDENTIAL_PATH"]}
      node_config.vm.provision "shell", inline: install_rally_user
      node_config.vm.provision "shell", inline: rally_sudoers
      node_config.vm.provision "shell", inline: install_rally_source(rally_repo, rally_branch, rally_sha)

      node_config.vm.provision "shell", inline: <<-EOF
        mkfs.ext4 /dev/sdb
        mkdir -p /var/lib/jenkins/.rally/benchmarks/races
        echo "/dev/sdb /var/lib/jenkins/.rally/benchmarks/races ext4 defaults 0 2" >>/etc/fstab
        mount -a
        #mount /buildtmp
        chown -R jenkins:jenkins /var/lib/jenkins/.rally/benchmarks
      EOF

      # Make a local copy of night_rally under the jenkins user home dir on the coordinator
      # required because installing night_rally needs write access to the `.egg` directory
      if node == nodes.first
        node_config.vm.provision "shell", inline: install_vault
        node_config.vm.provision "shell", inline: <<-EOF
          echo 'sudo rsync -r -o -g --chown=jenkins:jenkins --exclude ".vagrant" --exclude ".venv" --exclude "vagrantdisk" /night_rally /home/vagrant/.vault-token /var/lib/jenkins/' \
            >/home/vagrant/update_jenkins_night_rally.sh
          chmod +x update_jenkins_night_rally.sh
          ./update_jenkins_night_rally.sh

          sudo -iu jenkins bash -c 'cd night_rally; make install'
        EOF
      end

      node_config.vm.provision "shell", inline: install_night_rally_test_script(base_ip, target_node_ip_addresses)

      # To allow building Elasticsearch (nightlies) install the minimum set of java versions required on target nodes
      if node != nodes.first && install_build_requirements
        node_config.vm.provision "shell", inline: install_java(12)
        node_config.vm.provision "shell", inline: install_java(11)
        node_config.vm.provision "shell", inline: symlink_java_8
      end

      ip_address = ip_address.succ
    end
  end
end
