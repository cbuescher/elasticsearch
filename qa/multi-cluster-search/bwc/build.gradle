import org.elasticsearch.gradle.Version
import org.elasticsearch.gradle.internal.test.RestIntegTestTask

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

apply plugin: 'elasticsearch.internal-java-rest-test'
apply plugin: 'elasticsearch.internal-yaml-rest-test'
apply plugin: 'elasticsearch.yaml-rest-compat-test'
//apply plugin: 'elasticsearch.standalone-rest-test'

dependencies {
  yamlRestTestImplementation project(path: ':qa:multi-cluster-search')
  javaRestTestImplementation project(path: ':qa:multi-cluster-search')
  restXpackTestConfig project(path: ':qa:multi-cluster-search', configuration: 'restXpackTests')
  testImplementation project(":client:rest-high-level")
}

testClusters.register('remote-cluster') {
  versions = ["8.1.0"]
}

tasks.register('remote-cluster', RestIntegTestTask) {
  mustRunAfter("precommit")
  systemProperty 'tests.rest.suite', 'remote_cluster'
}

testClusters.configureEach {
  requiresFeature 'es.index_mode_feature_flag_registered', Version.fromString("8.0.0")
}

testClusters.matching{ it.name == 'remote-cluster' }.configureEach {
  numberOfNodes = 2
  println "configuring: " + it
  setting 'node.roles', '[data,ingest,master]'
  setting 'xpack.security.enabled', 'false'
}

tasks.register("mixedClusterTest", RestIntegTestTask) {
  useCluster testClusters.named('remote-cluster')
  dependsOn 'remote-cluster'
  systemProperty 'tests.rest.suite', 'multi_cluster'
}

testClusters.matching { it.name == "mixedClusterTest"}.configureEach {
  setting 'cluster.remote.my_remote_cluster.seeds',
    { "\"${testClusters.'remote-cluster'.getAllTransportPortURI().get(0)}\"" }
  setting 'cluster.remote.connections_per_cluster', '1'
  setting 'xpack.security.enabled', 'false'
}

tasks.register("integTest") {
  dependsOn "mixedClusterTest"
}

tasks.named("check").configure { dependsOn("integTest") }
